pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent {
                label 'agente-principal'
            }
            steps {
                script {
                    bat 'hostname'
                    bat 'whoami'
                    bat 'echo %WORKSPACE%'
                    // Obtener código del repositorio y stash
                    git branch: 'feature_fix_racecond', url: 'https://github.com/GemmaRamos/ejercicio1A.git'
                    stash name: 'code', includes: '**/*'
                }
            }
        }

        stage('Build & Unit') {
            agent {
                label 'agente-secundario-1'
            }
            steps {
                script {
                    bat 'hostname'
                    bat 'whoami'
                    bat 'echo %WORKSPACE%'
                    // Unstash del código y ejecución de Build & Unit tests
                    unstash 'code'
                    echo 'Eyyy, esto es Python. No hay que compilar nada!!!'
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        pytest --junitxml=result-unit.xml test/unit
                    '''
                    stash name: 'results1', includes: 'result*.xml'
                }
            }
        }

        stage('Rest') {
            agent {
                label 'agente-secundario-2'
            }
            steps {
                script {
                    def cpuLoad = 100
                    def retryCount = 0
                    def maxRetries = 10
                    def retryInterval = 60 // segundos

                    while (cpuLoad >= 80 && retryCount < maxRetries) {
                        echo "La CPU está saturada (${cpuLoad}%). Esperando para volver a intentar..."
                        sleep retryInterval

                        def commandOutput = bat(script: 'wmic cpu get loadpercentage', returnStdout: true).trim()
                        def lines = commandOutput.readLines().collect { it.trim() }
                        def loadString = lines.find { it.isNumber() }

                        if (loadString != null) {
                            cpuLoad = loadString.toInteger()
                        } else {
                            echo "No se pudo obtener el valor de carga de la CPU."
                            cpuLoad = 0
                        }

                        retryCount++
                    }

                    if (cpuLoad < 80) {
                        echo "La CPU ya no está saturada (${cpuLoad}%). Ejecutando pruebas de integración."
                        bat '''
                                set FLASK_APP=app\\api.py
                                set FLASK_ENV=development
                                start flask run
                                start java -jar C:\\Users\\gemma.ramos\\Desktop\\UNIR-DevOps\\Ejercicio1\\wiremock\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\Users\\gemma.ramos\\Desktop\\UNIR-DevOps\\Ejercicio1\\wiremock
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test\\rest
                            '''
                    } else {
                        error "La CPU sigue saturada después de varios intentos."
                    }
                }
            }
        }

        stage('Results') {
            agent {
                label 'agente-principal'
            }
            steps {
                script {
                    bat 'hostname'
                    bat 'whoami'
                    bat 'echo %WORKSPACE%'
                    // Unstash de los resultados y presentación
                    unstash 'results1'
                    unstash 'results2'
                    junit '**/result*.xml'
                }
            }
        }

        stage('Clean Workspace') {
            agent any
            steps {
                script {
                    bat 'echo Limpiando el workspace...'
                    deleteDir() // Esta función borra el workspace
                }
            }
        }
    }
}
